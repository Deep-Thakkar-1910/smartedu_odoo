generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  role          String    @default("user")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
model Student {
  id       String       @id @default(cuid())
  name     String
  progress Int
  status   String
  
  assignments Assignment[]

  @@map("students")
}

model Assignment {
  id        String   @id @default(cuid())
  title     String
  grade     String?
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])

  @@map("assignments")
}

model Event {
  id        String   @id @default(cuid())
  title     String
  date      DateTime

  @@map("events")
}
model Classroom {
  id        String   @id @default(cuid())
  name      String
  students  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("classrooms")
}
model Course {
  id          String   @id @default(cuid())
  name        String
  description String
  enrollment  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("courses")
}